import logging
import asyncio

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù"
ADMIN_CHAT_ID = "–¢–í–û–ô_CHAT_ID"

# === –ë–æ—Ç –∏ –î–∏—Å–ø–µ—Ç—á–µ—Ä ===
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

logging.basicConfig(level=logging.INFO)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã ===
class Form(StatesGroup):
    service = State()
    subservice = State()
    tint_shade = State()
    name = State()
    phone = State()
    car = State()
    datetime = State()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
main_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")],
    [KeyboardButton(text="–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª—ë–Ω–∫–æ–π")],
    [KeyboardButton(text="–ü–æ–ª–∏—Ä–æ–≤–∫–∞ –∫—É–∑–æ–≤–∞")],
    [KeyboardButton(text="–•–∏–º—á–∏—Å—Ç–∫–∞ —Å–∞–ª–æ–Ω–∞")],
], resize_keyboard=True)

tinting_options = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –∫—Ä—É–≥")],
    [KeyboardButton(text="–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–¥–Ω–µ–π –ø–æ–ª—É—Å—Ñ–µ—Ä—ã")],
    [KeyboardButton(text="–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–Ω–µ–π –ø–æ–ª—É—Å—Ñ–µ—Ä—ã")],
    [KeyboardButton(text="–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–¥–Ω–∏—Ö –¥–≤—É—Ö –±–æ–∫–æ–≤—ã—Ö —Å—Ç—ë–∫–æ–ª")],
    [KeyboardButton(text="–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–Ω–∏—Ö –¥–≤—É—Ö –±–æ–∫–æ–≤—ã—Ö —Å—Ç—ë–∫–æ–ª")],
    [KeyboardButton(text="–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –ª–æ–±–æ–≤–æ–≥–æ —Å—Ç–µ–∫–ª–∞")],
    [KeyboardButton(text="–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–Ω–µ–≥–æ —Å—Ç–µ–∫–ª–∞")],
    [KeyboardButton(text="–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å—Ç–µ–∫–ª–∞")],
    [KeyboardButton(text="–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –æ–¥–Ω–æ–π —Ñ–æ—Ä—Ç–æ—á–∫–∏")],
    [KeyboardButton(text="–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–æ—Å—ã 14—Å–º –ø–æ –ì–û–°–¢—É")],
    [KeyboardButton(text="–†–∞—Å—Ç–æ–Ω–∏—Ä–æ–≤–∫–∞")],
], resize_keyboard=True)

tint_shades = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="5"), KeyboardButton(text="15"), KeyboardButton(text="20")],
    [KeyboardButton(text="35"), KeyboardButton(text="50"), KeyboardButton(text="70")],
    [KeyboardButton(text="80 (–æ—Ç—Ç–æ—Ä–º–∞–ª–∫–∞)")],
], resize_keyboard=True)

remove_tint_options = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–†–∞—Å—Ç–æ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–Ω–µ–π –ø–æ–ª—É—Å—Ñ–µ—Ä—ã")],
    [KeyboardButton(text="–†–∞—Å—Ç–æ–Ω–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–¥–Ω–µ–π –ø–æ–ª—É—Å—Ñ–µ—Ä—ã")],
    [KeyboardButton(text="–†–∞—Å—Ç–æ–Ω–∏—Ä–æ–≤–∫–∞ –ª–æ–±–æ–≤–æ–≥–æ —Å—Ç–µ–∫–ª–∞")],
    [KeyboardButton(text="–†–∞—Å—Ç–æ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–Ω–µ–≥–æ —Å—Ç–µ–∫–ª–∞")],
    [KeyboardButton(text="–†–∞—Å—Ç–æ–Ω–∏—Ä–æ–≤–∫–∞ –¥–≤—É—Ö —Å—Ç—ë–∫–æ–ª")],
    [KeyboardButton(text="–†–∞—Å—Ç–æ–Ω–∏—Ä–æ–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å—Ç–µ–∫–ª–∞")],
    [KeyboardButton(text="–†–∞—Å—Ç–æ–Ω–∏—Ä–æ–≤–∫–∞ –æ–¥–Ω–æ–π —Ñ–æ—Ä—Ç–æ—á–∫–∏")],
    [KeyboardButton(text="–°–Ω—è—Ç–∏–µ –ø–æ–ª–æ—Å—ã")],
], resize_keyboard=True)

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Goryachev Studio</b>!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —É—Å–ª—É–≥—É –Ω–∏–∂–µ:",
        reply_markup=main_menu
    )
    await state.set_state(Form.service)

@dp.message(Form.service)
async def choose_service(message: types.Message, state: FSMContext):
    await state.update_data(service=message.text)

    if message.text == "–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=tinting_options)
        await state.set_state(Form.subservice)
    else:
        await ask_contacts(message, state)

@dp.message(Form.subservice)
async def choose_subservice(message: types.Message, state: FSMContext):
    await state.update_data(subservice=message.text)

    if message.text == "–†–∞—Å—Ç–æ–Ω–∏—Ä–æ–≤–∫–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å—Ç–æ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=remove_tint_options)
    elif "–†–∞—Å—Ç–æ–Ω–∏—Ä–æ–≤–∫–∞" in message.text:
        await message.answer(
            "‚ö° –í–Ω–∏–º–∞–Ω–∏–µ!\n\n"
            "–†–∏—Å–∫ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∏—Ç–µ–π –æ–±–æ–≥—Ä–µ–≤–∞ –ø—Ä–∏ —Ä–∞—Å—Ç–æ–Ω–∏—Ä–æ–≤–∫–µ –∑–∞–¥–Ω–µ–≥–æ —Å—Ç–µ–∫–ª–∞ (50/50 —à–∞–Ω—Å)."
        )
        await ask_contacts(message, state)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–µ—Ç–æ–ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏–µ –ø–ª—ë–Ω–∫–∏:", reply_markup=tint_shades)
        await state.set_state(Form.tint_shade)

@dp.message(Form.tint_shade)
async def choose_shade(message: types.Message, state: FSMContext):
    await state.update_data(tint_shade=message.text)
    await ask_contacts(message, state)

async def ask_contacts(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(Form.name)

@dp.message(Form.name)
async def ask_phone(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Form.phone)

@dp.message(Form.phone)
async def ask_car(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await state.set_state(Form.car)

@dp.message(Form.car)
async def ask_datetime(message: types.Message, state: FSMContext):
    await state.update_data(car=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:")
    await state.set_state(Form.datetime)

@dp.message(Form.datetime)
async def send_application(message: types.Message, state: FSMContext):
    await state.update_data(datetime=message.text)
    data = await state.get_data()

    text = (
        f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n"
        f"<b>–£—Å–ª—É–≥–∞:</b> {data.get('service')}\n"
        f"<b>–ü–æ–¥—É—Å–ª—É–≥–∞:</b> {data.get('subservice', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"<b>–°–≤–µ—Ç–æ–ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏–µ:</b> {data.get('tint_shade', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        f"<b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> {data.get('name')}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone')}\n"
        f"<b>–ê–≤—Ç–æ:</b> {data.get('car')}\n"
        f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</b> {data.get('datetime')}"
    )
    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=text)

    await message.answer(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
    )
    await message.answer(
        "üìç –ê–¥—Ä–µ—Å:\n<b>–≥. –ß–µ–ª—è–±–∏–Ω—Å–∫, –ö–æ–ø–µ–π—Å–∫–æ–µ —à–æ—Å—Å–µ 40–ë/1</b>"
    )

    await state.clear()

@dp.message()
async def fallback(message: types.Message, state: FSMContext):
    await message.answer(
        "‚ùì –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª.\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É —á–µ—Ä–µ–∑ –º–µ–Ω—é."
    )

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
def create_app():
    return bot, dp
